<<<<<<< HEAD
ALFCOM-3651: NOP Implementation of WebDAV PROPPATCH (works with Windows 7 / Vista)
https://issues.alfresco.com/jira/browse/ALFCOM-3651

Index: root/projects/remote-api/source/java/org/alfresco/repo/webdav/PropPatchMethod.java
===================================================================
--- root/projects/remote-api/source/java/org/alfresco/repo/webdav/PropPatchMethod.java	(revision 0)
+++ root/projects/remote-api/source/java/org/alfresco/repo/webdav/PropPatchMethod.java	(revision 0)
@@ -0,0 +1,308 @@
=======
ALFCOM-3651: NOP Implementation of WebDAV PROPPATCH (works with Windows 7 / Vista)
https://issues.alfresco.com/jira/browse/ALFCOM-3651

Index: root/projects/remote-api/source/java/org/alfresco/repo/webdav/PropPatchMethod.java
===================================================================
--- root/projects/remote-api/source/java/org/alfresco/repo/webdav/PropPatchMethod.java	(revision 0)
+++ root/projects/remote-api/source/java/org/alfresco/repo/webdav/PropPatchMethod.java	(revision 0)
@@ -0,0 +1,308 @@
>>>>>>> develop-5.1
+/*
+ * Copyright (C) 2005-2007 Alfresco Software Limited.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
+
+ * As a special exception to the terms and conditions of version 2.0 of 
+ * the GPL, you may redistribute this Program in connection with Free/Libre 
+ * and Open Source Software ("FLOSS") applications as described in Alfresco's 
+ * FLOSS exception.  You should have recieved a copy of the text describing 
+ * the FLOSS exception, and it is also available here: 
+ * http://www.alfresco.com/legal/licensing"
+ */
+package org.alfresco.repo.webdav;
+
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.servlet.http.HttpServletResponse;
+
+import org.alfresco.service.cmr.model.FileFolderService;
+import org.alfresco.service.cmr.model.FileInfo;
+import org.alfresco.service.cmr.model.FileNotFoundException;
+import org.alfresco.service.cmr.repository.NodeRef;
+import org.alfresco.service.cmr.repository.datatype.DefaultTypeConverter;
+import org.alfresco.service.cmr.repository.datatype.TypeConverter;
+import org.alfresco.service.namespace.QName;
+import org.dom4j.DocumentHelper;
+import org.dom4j.io.XMLWriter;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+import org.w3c.dom.Node;
+import org.w3c.dom.NodeList;
+import org.xml.sax.Attributes;
+
+/**
+ * Implements the WebDAV PROPPATCH method
+ * 
+ * @author Johan Venter
+ */
+public class PropPatchMethod extends WebDAVMethod
+{
+    // Requested properties
+    protected ArrayList<WebDAVProperty> m_properties = null;
+
+    // Available namespaces list
+    protected HashMap<String, String> m_namespaces = null;
+
+    /**
+     * Default constructor
+     */
+    public PropPatchMethod()
+    {
+        m_namespaces = new HashMap<String, String>();
+    }
+
+    /**
+     * Parse the request headers
+     * 
+     * @exception WebDAVServerException
+     */
+    protected void parseRequestHeaders() throws WebDAVServerException
+    {
+    }
+
+    /**
+     * Parse the request body
+     * 
+     * @exception WebDAVServerException
+     */
+    protected void parseRequestBody() throws WebDAVServerException
+    {
+        Document body = getRequestBodyAsDocument();
+        if (body != null)
+        {
+            Element rootElement = body.getDocumentElement();
+            NodeList childList = rootElement.getChildNodes();
+            Node node = null;
+
+            for (int i = 0; i < childList.getLength(); i++)
+            {
+                Node currentNode = childList.item(i);
+                if (currentNode.getNodeName().endsWith(WebDAV.XML_SET)) {
+                    node = currentNode;
+                }
+            }
+
+            if (node != null)
+            {
+                m_properties = new ArrayList<WebDAVProperty>();
+                childList = node.getChildNodes();
+
+                for (int i = 0; i < childList.getLength(); i++)
+                {
+                    Node currentNode = childList.item(i);
+                    switch (currentNode.getNodeType())
+                    {
+                    case Node.TEXT_NODE:
+                        break;
+                    case Node.ELEMENT_NODE:
+                        NodeList propertyChildren = currentNode.getChildNodes();
+                        String value = "";
+                        for (int j = 0; j < propertyChildren.getLength(); j++) 
+                        {
+                            Node propertyChildNode = propertyChildren.item(j);
+                            if (propertyChildNode.getNodeType() == Node.TEXT_NODE) 
+                            {
+                               value = propertyChildNode.getNodeValue(); 
+                            }
+                        }
+                        m_properties.add(createProperty(currentNode, value));
+                        break;
+                    }
+                }
+            }
+        }
+    }
+
+    /**
+     * Exceute the main WebDAV request processing
+     * 
+     * @exception WebDAVServerException
+     */
+    protected void executeImpl() throws WebDAVServerException, Exception
+    {
+        m_response.setStatus(WebDAV.WEBDAV_SC_MULTI_STATUS);
+
+        FileFolderService fileFolderService = getFileFolderService();
+
+        FileInfo pathNodeInfo = null;
+        try
+        {
+            // Check that the path exists
+            pathNodeInfo = getDAVHelper().getNodeForPath(getRootNodeRef(), m_strPath, m_request.getServletPath());
+        }
+        catch (FileNotFoundException e)
+        {
+            // The path is not valid - send a 404 error back to the client
+            throw new WebDAVServerException(HttpServletResponse.SC_NOT_FOUND);
+        }
+
+        // Set the response content type
+
+        m_response.setContentType(WebDAV.XML_CONTENT_TYPE);
+
+        // Create multistatus response
+
+        XMLWriter xml = createXMLWriter();
+
+        xml.startDocument();
+
+        String nsdec = generateNamespaceDeclarations(m_namespaces);
+        xml.startElement(
+                WebDAV.DAV_NS,
+                WebDAV.XML_MULTI_STATUS + nsdec,
+                WebDAV.XML_NS_MULTI_STATUS + nsdec,
+                getDAVHelper().getNullAttributes());
+
+        // Create the path for the current location in the tree
+        StringBuilder baseBuild = new StringBuilder(256);
+        baseBuild.append(getPath());
+        if (baseBuild.length() == 0 || baseBuild.charAt(baseBuild.length() - 1) != WebDAVHelper.PathSeperatorChar)
+        {
+            baseBuild.append(WebDAVHelper.PathSeperatorChar);
+        }
+        String basePath = baseBuild.toString();
+
+        // Output the response for the root node, depth zero
+        generateResponseForNode(xml, pathNodeInfo, basePath);
+
+        // Close the outer XML element
+        xml.endElement(WebDAV.DAV_NS, WebDAV.XML_MULTI_STATUS, WebDAV.XML_NS_MULTI_STATUS);
+
+        // Send remaining data
+        xml.flush();
+    }
+
+    /**
+     * Creates a WebDAVProperty from the given XML node
+     */
+    private WebDAVProperty createProperty(Node node, String value)
+    {
+        WebDAVProperty property = null;
+
+        String strName = node.getLocalName();
+        String strNamespaceUri = node.getNamespaceURI();
+
+        if (strNamespaceUri.equals(WebDAV.DEFAULT_NAMESPACE_URI))
+        {
+            property = new WebDAVProperty(strName);
+        }
+        else
+        {
+            property = new WebDAVProperty(strName, strNamespaceUri, getNamespaceName(strNamespaceUri), value);
+        }
+
+        return property;
+    }
+
+    /**
+     * Retrieves the namespace name for the given namespace URI, one is
+     * generated if it doesn't exist
+     */
+    private String getNamespaceName(String strNamespaceUri)
+    {
+        String strNamespaceName = m_namespaces.get(strNamespaceUri);
+        if (strNamespaceName == null)
+        {
+            strNamespaceName = "ns" + m_namespaces.size();
+            m_namespaces.put(strNamespaceUri, strNamespaceName);
+        }
+
+        return strNamespaceName;
+    }
+
+    /**
+     * Generates the required response XML for the current node
+     * 
+     * @param xml XMLWriter
+     * @param node NodeRef
+     * @param path String
+     */
+    protected void generateResponseForNode(XMLWriter xml, FileInfo nodeInfo, String path) throws Exception
+    {
+        NodeRef nodeRef = nodeInfo.getNodeRef();
+        boolean isFolder = nodeInfo.isFolder();
+        
+        // Output the response block for the current node
+        xml.startElement(
+                WebDAV.DAV_NS,
+                WebDAV.XML_RESPONSE,
+                WebDAV.XML_NS_RESPONSE,
+                getDAVHelper().getNullAttributes());
+
+        // Build the href string for the current node
+        String strHRef = WebDAV.getURLForPath(m_request, path, isFolder);
+
+        xml.startElement(WebDAV.DAV_NS, WebDAV.XML_HREF, WebDAV.XML_NS_HREF, getDAVHelper().getNullAttributes());
+        xml.write(strHRef);
+        xml.endElement(WebDAV.DAV_NS, WebDAV.XML_HREF, WebDAV.XML_NS_HREF);
+
+        generateNamedPropertiesResponse(xml, nodeInfo);
+
+        // Close off the response element
+        xml.endElement(WebDAV.DAV_NS, WebDAV.XML_RESPONSE, WebDAV.XML_NS_RESPONSE);
+    }
+
+    /**
+     * Generates the XML response for a PROPPATCH request that asks for a
+     * specific set of properties
+     * 
+     * @param xml XMLWriter
+     * @param node NodeRef
+     * @param isDir boolean
+     */
+    private void generateNamedPropertiesResponse(XMLWriter xml, FileInfo nodeInfo) throws Exception
+    {
+        NodeRef nodeRef = nodeInfo.getNodeRef();
+        boolean isFolder = nodeInfo.isFolder();
+        
+        // Get the properties for the node
+        Map<QName, Serializable> props = getNodeService().getProperties(nodeRef);
+
+        // Output the start of the properties element
+        Attributes nullAttr = getDAVHelper().getNullAttributes();
+
+        xml.startElement(WebDAV.DAV_NS, WebDAV.XML_PROPSTAT, WebDAV.XML_NS_PROPSTAT, nullAttr);
+        xml.startElement(WebDAV.DAV_NS, WebDAV.XML_PROP, WebDAV.XML_NS_PROP, nullAttr);
+
+        ArrayList<WebDAVProperty> propertiesNotFound = new ArrayList<WebDAVProperty>();
+
+        TypeConverter typeConv = DefaultTypeConverter.INSTANCE;
+
+        // Loop through the requested property list
+        for (WebDAVProperty property : m_properties)
+        {
+            String propName = property.getName();
+            String propNamespaceName = property.getNamespaceName();
+            String propQName = propName;
+            if (propNamespaceName != null && propNamespaceName.length() > 0)
+                propQName = propNamespaceName + ":" + propName;
+
+            xml.write(DocumentHelper.createElement(propQName));
+        }
+
+        // Close off the successful part of the response
+        xml.endElement(WebDAV.DAV_NS, WebDAV.XML_PROP, WebDAV.XML_NS_PROP);
+
+        xml.startElement(WebDAV.DAV_NS, WebDAV.XML_STATUS, WebDAV.XML_NS_STATUS, nullAttr);
+        xml.write(WebDAV.HTTP1_1 + " " + HttpServletResponse.SC_OK + " " + WebDAV.SC_OK_DESC);
+        xml.endElement(WebDAV.DAV_NS, WebDAV.XML_STATUS, WebDAV.XML_NS_STATUS);
+
+        xml.endElement(WebDAV.DAV_NS, WebDAV.XML_PROPSTAT, WebDAV.XML_NS_PROPSTAT);
+    }
+}
<<<<<<< HEAD
Index: root/projects/remote-api/source/java/org/alfresco/repo/webdav/WebDAV.java
===================================================================
--- root/projects/remote-api/source/java/org/alfresco/repo/webdav/WebDAV.java	(revision 17375)
+++ root/projects/remote-api/source/java/org/alfresco/repo/webdav/WebDAV.java	(working copy)
@@ -163,6 +163,7 @@
     public static final String XML_PROPSTAT = "propstat";
     public static final String XML_RESOURCE_TYPE = "resourcetype";
     public static final String XML_RESPONSE = "response";
+    public static final String XML_SET = "set";
     public static final String XML_SHARED = "shared";
     public static final String XML_SOURCE = "source";
     public static final String XML_STATUS = "status";
Index: root/projects/remote-api/source/java/org/alfresco/repo/webdav/WebDAVServlet.java
===================================================================
--- root/projects/remote-api/source/java/org/alfresco/repo/webdav/WebDAVServlet.java	(revision 17375)
+++ root/projects/remote-api/source/java/org/alfresco/repo/webdav/WebDAVServlet.java	(working copy)
@@ -304,6 +304,7 @@
=======
Index: root/projects/remote-api/source/java/org/alfresco/repo/webdav/WebDAV.java
===================================================================
--- root/projects/remote-api/source/java/org/alfresco/repo/webdav/WebDAV.java	(revision 17375)
+++ root/projects/remote-api/source/java/org/alfresco/repo/webdav/WebDAV.java	(working copy)
@@ -163,6 +163,7 @@
     public static final String XML_PROPSTAT = "propstat";
     public static final String XML_RESOURCE_TYPE = "resourcetype";
     public static final String XML_RESPONSE = "response";
+    public static final String XML_SET = "set";
     public static final String XML_SHARED = "shared";
     public static final String XML_SOURCE = "source";
     public static final String XML_STATUS = "status";
Index: root/projects/remote-api/source/java/org/alfresco/repo/webdav/WebDAVServlet.java
===================================================================
--- root/projects/remote-api/source/java/org/alfresco/repo/webdav/WebDAVServlet.java	(revision 17375)
+++ root/projects/remote-api/source/java/org/alfresco/repo/webdav/WebDAVServlet.java	(working copy)
@@ -304,6 +304,7 @@
>>>>>>> develop-5.1
         m_davMethods = new Hashtable<String,Class>();
         
         m_davMethods.put(WebDAV.METHOD_PROPFIND, PropFindMethod.class);
+        m_davMethods.put(WebDAV.METHOD_PROPPATCH, PropPatchMethod.class);
         m_davMethods.put(WebDAV.METHOD_COPY, CopyMethod.class);
         m_davMethods.put(WebDAV.METHOD_DELETE, DeleteMethod.class);
         m_davMethods.put(WebDAV.METHOD_GET, GetMethod.class);
