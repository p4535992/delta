package ee.webmedia.alfresco.docconfig.generator.systematic;

<<<<<<< HEAD
import static ee.webmedia.alfresco.docdynamic.model.DocumentDynamicModel.Props.THESAURUS;
=======
>>>>>>> 29c20c3e1588186b14bdc3b5fa90cae04ea61fc5
import static org.alfresco.web.ui.common.StringUtils.encode;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.faces.component.UIComponent;
import javax.faces.component.UIInput;
import javax.faces.context.FacesContext;
import javax.faces.el.ValueBinding;
import javax.faces.event.PhaseId;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;

import org.alfresco.service.namespace.QName;
import org.alfresco.web.bean.repository.Node;
import org.alfresco.web.ui.repo.component.property.UIPropertySheet;
import org.apache.commons.lang.StringUtils;
<<<<<<< HEAD

import ee.webmedia.alfresco.common.propertysheet.config.WMPropertySheetConfigElement.ItemConfigVO;
import ee.webmedia.alfresco.common.propertysheet.config.WMPropertySheetConfigElement.ItemConfigVO.ConfigItemType;
=======
import org.springframework.util.Assert;

import ee.webmedia.alfresco.common.propertysheet.config.WMPropertySheetConfigElement.ItemConfigVO;
>>>>>>> 29c20c3e1588186b14bdc3b5fa90cae04ea61fc5
import ee.webmedia.alfresco.common.propertysheet.generator.GeneralSelectorGenerator;
import ee.webmedia.alfresco.common.propertysheet.multivalueeditor.MultiValueEditor;
import ee.webmedia.alfresco.common.propertysheet.multivalueeditor.PropsBuilder;
import ee.webmedia.alfresco.common.web.BeanHelper;
import ee.webmedia.alfresco.docadmin.service.Field;
import ee.webmedia.alfresco.docadmin.service.FieldGroup;
import ee.webmedia.alfresco.docconfig.generator.BasePropertySheetStateHolder;
import ee.webmedia.alfresco.docconfig.generator.BaseSystematicFieldGenerator;
import ee.webmedia.alfresco.docconfig.generator.GeneratorResults;
import ee.webmedia.alfresco.docdynamic.model.DocumentDynamicModel;
import ee.webmedia.alfresco.thesaurus.model.HierarchicalKeyword;
import ee.webmedia.alfresco.thesaurus.model.Thesaurus;
import ee.webmedia.alfresco.utils.Closure;
import ee.webmedia.alfresco.utils.ComponentUtil;
import ee.webmedia.alfresco.utils.MessageUtil;
import ee.webmedia.alfresco.utils.RepoUtil;
import ee.webmedia.alfresco.utils.WebUtil;

/**
 * Generates components for Systematic group Keywords
<<<<<<< HEAD
 * 
 * @author Ats Uiboupin
=======
>>>>>>> 29c20c3e1588186b14bdc3b5fa90cae04ea61fc5
 */
public class KeywordsGenerator extends BaseSystematicFieldGenerator {

    private String[] originalFieldIds;

    @Override
    public void afterPropertiesSet() {
        Set<String> fields = new HashSet<String>();
        fields.add(DocumentDynamicModel.Props.FIRST_KEYWORD_LEVEL.getLocalName());
        fields.add(DocumentDynamicModel.Props.SECOND_KEYWORD_LEVEL.getLocalName());

        originalFieldIds = fields.toArray(new String[fields.size()]);
        documentConfigService.registerMultiValuedOverrideInSystematicGroup(originalFieldIds);
<<<<<<< HEAD
        documentConfigService.registerHiddenFieldDependency(THESAURUS.getLocalName(), DocumentDynamicModel.Props.FIRST_KEYWORD_LEVEL.getLocalName());
=======
>>>>>>> 29c20c3e1588186b14bdc3b5fa90cae04ea61fc5
        super.afterPropertiesSet();
    }

    @Override
    protected String[] getOriginalFieldIds() {
        return originalFieldIds;
    }

    @Override
    public void generateField(Field field, GeneratorResults generatorResults) {
<<<<<<< HEAD
        // Can be used outside systematic field group or search - then additional functionality is not present
        boolean searchForm = field.isForSearch();
        if (!searchForm && (!(field.getParent() instanceof FieldGroup) || !((FieldGroup) field.getParent()).isSystematic())) {
=======
        // Can be used outside systematic field group - then additional functionality is not present
        if (!(field.getParent() instanceof FieldGroup) || !((FieldGroup) field.getParent()).isSystematic()) {
>>>>>>> 29c20c3e1588186b14bdc3b5fa90cae04ea61fc5
            // field not in systematic fieldGroup - it might be for example on documents search form
            generatorResults.getAndAddPreGeneratedItem();
            return;
        }
        if (DocumentDynamicModel.Props.SECOND_KEYWORD_LEVEL.getLocalName().equals(field.getOriginalFieldId())) {
            return; // keywords group component (including field for SECOND_KEYWORD_LEVEL) was completely generated by FIRST_KEYWORD_LEVEL field
        }
        final FieldGroup group = (FieldGroup) field.getParent();

        List<String> props = new ArrayList<String>();
        List<QName> propNames = new ArrayList<QName>();
        QName firstKeywordLevelProp = null;
        QName secondKeywordLevelProp = null;
        String stateHolderKey = field.getFieldId();
        String generatorName = GeneralSelectorGenerator.class.getSimpleName();
<<<<<<< HEAD

        String defaultThesaurus = null;
        if (searchForm) {
            int thesauriCount = BeanHelper.getThesaurusService().getThesauriCount();
            if (thesauriCount > 1) {
                PropsBuilder generalSelectorGeneratorBuilder = new PropsBuilder(THESAURUS, generatorName);
                generalSelectorGeneratorBuilder.addProp(GeneralSelectorGenerator.ATTR_SELECTION_ITEMS, getBindingName("getThesaurusSelectItems", stateHolderKey))
                        .addProp(GeneralSelectorGenerator.ATTR_VALUE_CHANGE_LISTENER, getBindingName("thesaurusChanged", stateHolderKey))
                        .addProp("display-label-id", "thesaurus");
                props.add(generalSelectorGeneratorBuilder.build());
                propNames.add(THESAURUS);
            } else if (thesauriCount == 1) {
                defaultThesaurus = BeanHelper.getThesaurusService().getThesauri(false).get(0).getName();
            }
            firstKeywordLevelProp = addFirstLevel(stateHolderKey, generatorName, DocumentDynamicModel.Props.FIRST_KEYWORD_LEVEL, props, propNames, generatorResults);
            secondKeywordLevelProp = addSecondLevel(stateHolderKey, generatorName, DocumentDynamicModel.Props.SECOND_KEYWORD_LEVEL, props, propNames, generatorResults);
        } else {
            defaultThesaurus = group.getThesaurus();
            for (Field child : group.getFields()) {
                QName fieldId = child.getQName();
                String originalFieldId = child.getOriginalFieldId();
                if (DocumentDynamicModel.Props.FIRST_KEYWORD_LEVEL.getLocalName().equals(originalFieldId)) {
                    firstKeywordLevelProp = addFirstLevel(stateHolderKey, generatorName, fieldId, props, propNames, generatorResults);
                } else if (DocumentDynamicModel.Props.SECOND_KEYWORD_LEVEL.getLocalName().equals(originalFieldId)) {
                    secondKeywordLevelProp = addSecondLevel(stateHolderKey, generatorName, fieldId, props, propNames, generatorResults);
                } else {
                    throw new RuntimeException("Unknown field in keywords group: " + originalFieldId);
                }
            }
        }

        ItemConfigVO item = generatorResults.getAndAddPreGeneratedItem();
        item.setComponentGenerator("MultiValueEditorGenerator");
        item.setStyleClass("add-item");
        item.setAddLabelId("keywords_add_keyword");
        item.setShowInViewMode(false);
        item.setPropsGeneration(StringUtils.join(props, ","));

        if (searchForm) {
            item.setDisplayLabelId("thesaurus_keywords");
            item.setName("docdyn:thesaurus");
            item.setInitialRows(1);
        } else {
            item.setDisplayLabel(group.getReadonlyFieldsName());
            item.setName(field.getFieldId());
        }

        // And generate a separate view mode component
        String viewModePropName = null;
        if (!searchForm) {
            viewModePropName = RepoUtil.createTransientProp(field.getFieldId() + "Label").toString();
            ItemConfigVO viewModeItem = generatorResults.generateAndAddViewModeText(viewModePropName, group.getReadonlyFieldsName());
            viewModeItem.setComponentGenerator("UnescapedOutputTextGenerator");
        }

        generatorResults.addStateHolder(stateHolderKey, new KeywordsTableState(propNames, firstKeywordLevelProp, secondKeywordLevelProp, viewModePropName, defaultThesaurus));
    }

    private QName addFirstLevel(String stateHolderKey, String generatorName, QName fieldId, List<String> props, List<QName> propNames, GeneratorResults generatorResults) {
        PropsBuilder generalSelectorGeneratorBuilder = new PropsBuilder(fieldId, generatorName);
        generalSelectorGeneratorBuilder
                .addProp(GeneralSelectorGenerator.ATTR_SELECTION_ITEMS, getBindingName("getFirstKeywordLevelSelectItems", stateHolderKey))
                .addProp(GeneralSelectorGenerator.ATTR_VALUE_CHANGE_LISTENER, getBindingName("firstKeywordLevelChanged", stateHolderKey));

        props.add(generalSelectorGeneratorBuilder.build());
        propNames.add(fieldId);

        ItemConfigVO item = new ItemConfigVO(fieldId.toPrefixString(BeanHelper.getNamespaceService()));
        item.setConfigItemType(ConfigItemType.PROPERTY);
        item.setShowInEditMode(false);
        item.setShowInViewMode(false);
        generatorResults.addItem(item);

        return fieldId;
    }

    private QName addSecondLevel(String stateHolderKey, String generatorName, QName fieldId, List<String> props, List<QName> propNames, GeneratorResults generatorResults) {
        PropsBuilder generalSelectorGeneratorBuilder = new PropsBuilder(fieldId, generatorName);
        generalSelectorGeneratorBuilder.addProp(GeneralSelectorGenerator.ATTR_SELECTION_ITEMS, getBindingName("getSecondKeywordLevelSelectItems", stateHolderKey));
        props.add(generalSelectorGeneratorBuilder.build());
        propNames.add(fieldId);

        ItemConfigVO item = new ItemConfigVO(fieldId.toPrefixString(BeanHelper.getNamespaceService()));
        item.setConfigItemType(ConfigItemType.PROPERTY);
        item.setShowInEditMode(false);
        item.setShowInViewMode(false);
        generatorResults.addItem(item);

        return fieldId;
=======
        for (Field child : group.getFields()) {
            QName fieldId = child.getQName();
            PropsBuilder generalSelectorGeneratorBuilder = new PropsBuilder(fieldId, generatorName);
            String originalFieldId = child.getOriginalFieldId();
            if (DocumentDynamicModel.Props.FIRST_KEYWORD_LEVEL.getLocalName().equals(originalFieldId)) {
                firstKeywordLevelProp = fieldId;
                generalSelectorGeneratorBuilder
                        .addProp(GeneralSelectorGenerator.ATTR_SELECTION_ITEMS, getBindingName("getFirstKeywordLevelSelectItems", stateHolderKey))
                        .addProp(GeneralSelectorGenerator.ATTR_VALUE_CHANGE_LISTENER, getBindingName("firstKeywordLevelChanged", stateHolderKey));
            } else if (DocumentDynamicModel.Props.SECOND_KEYWORD_LEVEL.getLocalName().equals(originalFieldId)) {
                secondKeywordLevelProp = fieldId;
                generalSelectorGeneratorBuilder.addProp(GeneralSelectorGenerator.ATTR_SELECTION_ITEMS, getBindingName("getSecondKeywordLevelSelectItems", stateHolderKey));
            } else {
                throw new RuntimeException("Unknown field in keywords group: " + originalFieldId);
            }
            props.add(generalSelectorGeneratorBuilder.build());
            propNames.add(fieldId);
        }

        ItemConfigVO item = generatorResults.getAndAddPreGeneratedItem();
        item.setName(RepoUtil.createTransientProp(field.getFieldId()).toString());
        item.setComponentGenerator("MultiValueEditorGenerator");
        item.setStyleClass("add-item");

        item.setDisplayLabel(group.getReadonlyFieldsName());
        item.setAddLabelId("keywords_add_keyword");

        item.setShowInViewMode(false);
        item.setPropsGeneration(StringUtils.join(props, ","));

        // And generate a separate view mode component
        String viewModePropName = RepoUtil.createTransientProp(field.getFieldId() + "Label").toString();
        ItemConfigVO viewModeItem = generatorResults.generateAndAddViewModeText(viewModePropName, group.getReadonlyFieldsName());
        viewModeItem.setComponentGenerator("UnescapedOutputTextGenerator");

        generatorResults.addStateHolder(stateHolderKey, new KeywordsTableState(propNames, firstKeywordLevelProp, secondKeywordLevelProp, viewModePropName, group.getThesaurus()));
>>>>>>> 29c20c3e1588186b14bdc3b5fa90cae04ea61fc5
    }

    // ===============================================================================================================================

    public static class KeywordsTableState extends BasePropertySheetStateHolder {
        private static final long serialVersionUID = 1L;

        private final List<QName> propNames;
        private final QName firstKeywordLevelProp;
        private final QName secondKeywordLevelProp;
        private final String viewModePropName;
<<<<<<< HEAD
        private final String defaultThesaurusName;
        private final Map<String/* thesaurusName */, Map<String/* level1Keywords */, List<String>/* level2Keywords */>> hierarchy = new HashMap<String, Map<String, List<String>>>();

        public KeywordsTableState(List<QName> propNames, QName firstKeywordLevelProp, QName secondKeywordLevelProp, String viewModePropName, String defaultThesaurusName) {
=======
        private final String thesaurusName;
        private Map<String/* level1Keywords */, List<String>/* level2Keywords */> hirearchy;

        public KeywordsTableState(List<QName> propNames, QName firstKeywordLevelProp, QName secondKeywordLevelProp, String viewModePropName, String thesaurusName) {
>>>>>>> 29c20c3e1588186b14bdc3b5fa90cae04ea61fc5
            this.propNames = propNames;
            this.firstKeywordLevelProp = firstKeywordLevelProp;
            this.secondKeywordLevelProp = secondKeywordLevelProp;
            this.viewModePropName = viewModePropName;
<<<<<<< HEAD
            this.defaultThesaurusName = defaultThesaurusName;
        }

        public List<SelectItem> getThesaurusSelectItems(FacesContext context, UIInput selectComponent) {
            List<SelectItem> items = new ArrayList<SelectItem>();
            for (Thesaurus t : BeanHelper.getThesaurusService().getThesauri(false)) {
                items.add(new SelectItem(t.getName(), t.getName()));
            }
            if (items.isEmpty()) {
                ComponentUtil.getAttributes(selectComponent).put("title", MessageUtil.getMessage("thesaurus_empty"));
            } else {
                ComponentUtil.addDefault(items, context);
            }
            WebUtil.sort(items);
            return items;
        }

        public List<SelectItem> getFirstKeywordLevelSelectItems(FacesContext context, UIInput selectComponent) {
            String selectedThesaurus = StringUtils.isNotBlank(defaultThesaurusName) ? defaultThesaurusName : getSelectedThesaurus(context, selectComponent);
            if (StringUtils.isBlank(selectedThesaurus)) {
                ComponentUtil.putAttribute(selectComponent, "disabled", true);
                return Collections.<SelectItem> emptyList();
            }

            Map<String, List<String>> thesaurusKeywords = hierarchy.get(selectedThesaurus);
            if (thesaurusKeywords == null) {
                List<HierarchicalKeyword> keywords = Collections.emptyList();
                String thesaurusName = StringUtils.isBlank(defaultThesaurusName) ? selectedThesaurus : defaultThesaurusName;
                Thesaurus thesaurus = BeanHelper.getThesaurusService().getThesaurus(thesaurusName, true);
                keywords = thesaurus.getKeywords();
                thesaurusKeywords = new HashMap<String, List<String>>();

                for (HierarchicalKeyword kw : keywords) {
                    String keywordLevel1 = kw.getKeywordLevel1();
                    List<String> level2List = thesaurusKeywords.get(keywordLevel1);
                    if (level2List == null) {
                        level2List = new ArrayList<String>(5);
                        thesaurusKeywords.put(keywordLevel1, level2List);
                    }
                    level2List.add(kw.getKeywordLevel2());
                }
                hierarchy.put(thesaurusName, thesaurusKeywords);
            }
            List<SelectItem> selectItems = new ArrayList<SelectItem>(thesaurusKeywords.size());
            for (String keywordLevel1 : thesaurusKeywords.keySet()) {
=======
            this.thesaurusName = thesaurusName;
            Assert.notNull(thesaurusName, "thesaurusName shouldn't bee null for systematic fields group keywords");
        }

        public List<SelectItem> getFirstKeywordLevelSelectItems(FacesContext context, UIInput selectComponent) {
            if (hirearchy == null) {
                Thesaurus thesaurus = BeanHelper.getThesaurusService().getThesaurus(thesaurusName, true);
                List<HierarchicalKeyword> keywords = thesaurus.getKeywords();
                hirearchy = new HashMap<String, List<String>>();
                for (HierarchicalKeyword kw : keywords) {
                    String keywordLevel1 = kw.getKeywordLevel1();
                    List<String> level2List = hirearchy.get(keywordLevel1);
                    if (level2List == null) {
                        level2List = new ArrayList<String>(5);
                        hirearchy.put(keywordLevel1, level2List);
                    }
                    level2List.add(kw.getKeywordLevel2());
                }
            }
            List<SelectItem> selectItems = new ArrayList<SelectItem>(hirearchy.size());
            for (String keywordLevel1 : hirearchy.keySet()) {
>>>>>>> 29c20c3e1588186b14bdc3b5fa90cae04ea61fc5
                selectItems.add(new SelectItem(keywordLevel1, keywordLevel1));
            }
            if (selectItems.isEmpty()) {
                ComponentUtil.getAttributes(selectComponent).put("title", MessageUtil.getMessage("thesaurus_empty"));
            } else {
                ComponentUtil.addDefault(selectItems, context);
            }
            WebUtil.sort(selectItems);
            return selectItems;
        }

        public List<SelectItem> getSecondKeywordLevelSelectItems(FacesContext context, UIInput selectComponent) {
            String firstLevelKeyword = getFirstLevelKeyword(context, selectComponent);
            if (StringUtils.isBlank(firstLevelKeyword)) {
                ComponentUtil.putAttribute(selectComponent, "disabled", true);
                return Collections.<SelectItem> emptyList();
            }
<<<<<<< HEAD

            String selectedThesaurus = StringUtils.isNotBlank(defaultThesaurusName) ? defaultThesaurusName : getSelectedThesaurus(context, selectComponent);
            List<String> level2List = hierarchy.get(selectedThesaurus).get(firstLevelKeyword);
            List<SelectItem> selectItems = new ArrayList<SelectItem>(level2List == null ? 1 : level2List.size());
            if (level2List != null) {
                for (String keywordLevel2 : level2List) {
                    selectItems.add(new SelectItem(keywordLevel2, keywordLevel2));
                }
                if (!selectItems.isEmpty()) {
                    ComponentUtil.addDefault(selectItems, context);
                }
                WebUtil.sort(selectItems);
            } else {
                String value = (String) getSecondLevelKeywordVb(context, selectComponent).getValue(context);
                selectItems.add(new SelectItem(value, value));
            }
            return selectItems;
        }

        private String getSelectedThesaurus(FacesContext context, UIInput selectComponent) {
            ValueBinding secondLevelVB = selectComponent.getValueBinding("value");
            String expressionString = secondLevelVB.getExpressionString();
            String searchString = (expressionString.contains(firstKeywordLevelProp.toString()) ? firstKeywordLevelProp : secondKeywordLevelProp).toString();
            String thesaurusVBExpr = StringUtils.replace(expressionString, searchString, THESAURUS.toString());
            ValueBinding vb = context.getApplication().createValueBinding(thesaurusVBExpr);
            return (String) vb.getValue(context);
        }

=======
            List<String> level2List = hirearchy.get(firstLevelKeyword);
            List<SelectItem> selectItems = new ArrayList<SelectItem>(level2List.size());
            for (String keywordLevel2 : level2List) {
                selectItems.add(new SelectItem(keywordLevel2, keywordLevel2));
            }
            if (!selectItems.isEmpty()) {
                ComponentUtil.addDefault(selectItems, context);
            }
            WebUtil.sort(selectItems);
            return selectItems;
        }

>>>>>>> 29c20c3e1588186b14bdc3b5fa90cae04ea61fc5
        private String getFirstLevelKeyword(FacesContext context, UIInput selectComponent) {
            ValueBinding secondLevelVB = selectComponent.getValueBinding("value");
            String firstLevelVBExpr = StringUtils.replace(secondLevelVB.getExpressionString(), secondKeywordLevelProp.toString(),
                    firstKeywordLevelProp.toString());
            ValueBinding vb = context.getApplication().createValueBinding(firstLevelVBExpr);
<<<<<<< HEAD
            return (String) vb.getValue(context);
        }

        private ValueBinding getFirstLevelKeywordVb(FacesContext context, UIInput selectComponent) {
            ValueBinding thesaurusVB = selectComponent.getValueBinding("value");
            String firstLevelVBExpr = StringUtils.replace(thesaurusVB.getExpressionString(), THESAURUS.toString(),
                    secondKeywordLevelProp.toString());
            ValueBinding vb = context.getApplication().createValueBinding(firstLevelVBExpr);
            return vb;
=======
            String firstLevelKeyword = (String) vb.getValue(context);
            return firstLevelKeyword;
>>>>>>> 29c20c3e1588186b14bdc3b5fa90cae04ea61fc5
        }

        private ValueBinding getSecondLevelKeywordVb(FacesContext context, UIInput selectComponent) {
            ValueBinding firstLevelVB = selectComponent.getValueBinding("value");
            String secondLevelVBExpr = StringUtils.replace(firstLevelVB.getExpressionString(), firstKeywordLevelProp.toString(),
                    secondKeywordLevelProp.toString());
            ValueBinding vb = context.getApplication().createValueBinding(secondLevelVBExpr);
            return vb;
        }

        public void firstKeywordLevelChanged(ValueChangeEvent event) {
            // For information: if one or more rows are added to MultiValueEditor via add button
            // and then a value is changed on a row that was _previously existing_ (not added),
            // then this changed event is called on:
            // 1) the component whose value was changed
            // 2) on every added row's component also
            if (StringUtils.isEmpty((String) event.getOldValue()) && StringUtils.isEmpty((String) event.getNewValue())) {
                // We don't need to handle (2) events
                // And these (2) events would also produce errors if add + remove on the just added row are clicked,
                // because vb.setValue below would try to access list index that was already removed by MultiValueEditor
                return;
            }

            final UIInput firstLevelComponent = (UIInput) event.getComponent();
            final MultiValueEditor multiValueEditor = ComponentUtil.getAncestorComponent(firstLevelComponent, MultiValueEditor.class, true);

            // Execute at the end of UPDATE_MODEL_VALUES phase, because during this phase node properties are set from user submitted data.
            // Queue executeLater event on propertySheet, because it supports handling ActionEvents.
            // Find propertySheet from component's hierarchy, do NOT use dialogDataProvider#getPropertySheet,
            // because this AJAX submit is executed only on MultiValueEditor and thus PropertySheet binding to DocumentDynamicDialog has not been updated.
            UIPropertySheet propertySheet = ComponentUtil.getAncestorComponent(multiValueEditor, UIPropertySheet.class, true);
            ComponentUtil.executeLater(PhaseId.UPDATE_MODEL_VALUES, propertySheet, new Closure<UIComponent>() {
                @Override
                public void exec(UIComponent nill) {
                    multiValueEditor.getChildren().clear();

                    FacesContext context = FacesContext.getCurrentInstance();
                    ValueBinding vb = getSecondLevelKeywordVb(context, firstLevelComponent);
                    vb.setValue(context, null);
                }
            });
        }

<<<<<<< HEAD
        public void thesaurusChanged(ValueChangeEvent event) {
            if (StringUtils.isEmpty((String) event.getOldValue()) && StringUtils.isEmpty((String) event.getNewValue())) {
                return;
            }

            final UIInput thesaurusComponent = (UIInput) event.getComponent();
            final MultiValueEditor multiValueEditor = ComponentUtil.getAncestorComponent(thesaurusComponent, MultiValueEditor.class, true);

            UIPropertySheet propertySheet = ComponentUtil.getAncestorComponent(multiValueEditor, UIPropertySheet.class, true);
            ComponentUtil.executeLater(PhaseId.UPDATE_MODEL_VALUES, propertySheet, new Closure<UIComponent>() {
                @Override
                public void exec(UIComponent nill) {
                    multiValueEditor.getChildren().clear();

                    FacesContext context = FacesContext.getCurrentInstance();
                    ValueBinding vb = getFirstLevelKeywordVb(context, thesaurusComponent);
                    vb.setValue(context, null);
                }
            });
        }

=======
>>>>>>> 29c20c3e1588186b14bdc3b5fa90cae04ea61fc5
        @Override
        protected void reset(boolean inEditMode) {
            if (!inEditMode) {
                // update view mode property value
                final Node document = dialogDataProvider.getNode();
                int size = 0;
                List<List<String>> all = new ArrayList<List<String>>();
                Map<String, Object> props = document.getProperties();
                for (QName propName : propNames) {
                    @SuppressWarnings("unchecked")
                    List<String> columnValues = (List<String>) props.get(propName);
                    if (columnValues == null) {
                        columnValues = new ArrayList<String>();
                    }
                    size = Math.max(columnValues.size(), size);
                    all.add(columnValues);
                }

                List<String> rows = new ArrayList<String>(size);
                for (int rowIndex = 0; rowIndex < size; rowIndex++) {
                    List<String> rowValues = new ArrayList<String>();
                    for (List<String> columnValues : all) {
                        if (rowIndex < columnValues.size()) {
                            String value = StringUtils.trim(columnValues.get(rowIndex));
                            if (StringUtils.isNotBlank(value)) {
                                rowValues.add(encode(value));
                            }
                        }
                    }
                    if (!rowValues.isEmpty()) {
                        rows.add(StringUtils.join(rowValues, ", "));
                    }
                }
                props.put(viewModePropName, StringUtils.join(rows, "<br/>"));
            }
        }

    }

}
