package ee.webmedia.alfresco.docconfig.generator.systematic;

import static ee.webmedia.alfresco.common.web.BeanHelper.getDocumentTemplateService;

import java.util.ArrayList;
import java.util.List;

import javax.faces.component.UIInput;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;

import org.apache.commons.io.FilenameUtils;

import ee.webmedia.alfresco.common.propertysheet.config.WMPropertySheetConfigElement.ItemConfigVO;
import ee.webmedia.alfresco.docadmin.model.DocumentAdminModel;
import ee.webmedia.alfresco.docadmin.service.Field;
import ee.webmedia.alfresco.docconfig.generator.BasePropertySheetStateHolder;
import ee.webmedia.alfresco.docconfig.generator.BaseSystematicFieldGenerator;
import ee.webmedia.alfresco.docconfig.generator.GeneratorResults;
import ee.webmedia.alfresco.document.model.DocumentSpecificModel;
import ee.webmedia.alfresco.template.model.UnmodifiableDocumentTemplate;
import ee.webmedia.alfresco.utils.WebUtil;

public class TemplateNameGenerator extends BaseSystematicFieldGenerator {

    @Override
    protected String[] getOriginalFieldIds() {
        return new String[] { DocumentSpecificModel.Props.TEMPLATE_NAME.getLocalName() };
    }

    @Override
    public void generateField(Field field, GeneratorResults generatorResults) {
        ItemConfigVO item = generatorResults.getAndAddPreGeneratedItem();
        item.setComponentGenerator("GeneralSelectorGenerator");
        String stateHolderKey = field.getFieldId();
        item.setSelectionItems(getBindingName("findDocumentTemplates", stateHolderKey));
        generatorResults.addStateHolder(stateHolderKey, new TemplateNameState());
    }

    // ===============================================================================================================================

    public static class TemplateNameState extends BasePropertySheetStateHolder {
        private static final long serialVersionUID = 1L;

        /**
         * Query callback method executed by the component generated by GeneralSelectorGenerator.
         * This method is part of the contract to the GeneralSelectorGenerator, it is up to the backing bean
         * to execute whatever query is appropriate and populate <code>selectComponent</code> with selection items.<br>
         * 
         * @param context - FacesContext for creating selection items
         * @param selectComponent - selectComponent that will be rendered(use <code>selectComponent.getChildren()</code> to add selection items)
         * @return A collection of UISelectItem objects containing the selection items to show on form.
         */
        public List<SelectItem> findDocumentTemplates(FacesContext context, UIInput selectComponent) {
            List<UnmodifiableDocumentTemplate> docTemplates = getDocumentTemplateService().getDocumentTemplates(
                    (String) dialogDataProvider.getNode().getProperties().get(DocumentAdminModel.Props.OBJECT_TYPE_ID));
            List<SelectItem> selectItems = new ArrayList<SelectItem>(docTemplates.size() + 1);

            // Empty default selection
            selectItems.add(new SelectItem("", ""));

            for (UnmodifiableDocumentTemplate tmpl : docTemplates) {
                selectItems.add(new SelectItem(tmpl.getName(), FilenameUtils.removeExtension(tmpl.getName())));
            }

            // If we have only 1 match, then preselect it
            if (selectItems.size() == 2) {
                selectComponent.setValue(selectItems.get(1).getValue());
            } else {
                WebUtil.sort(selectItems);
            }
            return selectItems;
        }

    }

}
